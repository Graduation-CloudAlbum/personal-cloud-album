<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.yznu.pca.dao.UserPromissionMapper" >
  <resultMap id="BaseResultMap" type="cn.yznu.pca.model.UserPromission" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="friend_id" property="friendId" jdbcType="INTEGER" />
    <result column="album_id" property="albumId" jdbcType="INTEGER" />
    <result column="jurisdiction" property="jurisdiction" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, create_time, status, user_id, friend_id, album_id, jurisdiction
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.yznu.pca.model.UserPromission" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_promission
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user_promission
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_promission
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.yznu.pca.model.UserPromission" >
    delete from user_promission
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.yznu.pca.model.UserPromission" >
    insert into user_promission (id, create_time, status, 
      user_id, friend_id, album_id, 
      jurisdiction)
    values (#{id,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{status,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{friendId,jdbcType=INTEGER}, #{albumId,jdbcType=INTEGER}, 
      #{jurisdiction,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.yznu.pca.model.UserPromission" >
    insert into user_promission
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="friendId != null" >
        friend_id,
      </if>
      <if test="albumId != null" >
        album_id,
      </if>
      <if test="jurisdiction != null" >
        jurisdiction,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="friendId != null" >
        #{friendId,jdbcType=INTEGER},
      </if>
      <if test="albumId != null" >
        #{albumId,jdbcType=INTEGER},
      </if>
      <if test="jurisdiction != null" >
        #{jurisdiction,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.yznu.pca.model.UserPromission" resultType="java.lang.Integer" >
    select count(*) from user_promission
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user_promission
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.friendId != null" >
        friend_id = #{record.friendId,jdbcType=INTEGER},
      </if>
      <if test="record.albumId != null" >
        album_id = #{record.albumId,jdbcType=INTEGER},
      </if>
      <if test="record.jurisdiction != null" >
        jurisdiction = #{record.jurisdiction,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user_promission
    set id = #{record.id,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=INTEGER},
      friend_id = #{record.friendId,jdbcType=INTEGER},
      album_id = #{record.albumId,jdbcType=INTEGER},
      jurisdiction = #{record.jurisdiction,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.yznu.pca.model.UserPromission" >
    update user_promission
    <set >
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="friendId != null" >
        friend_id = #{friendId,jdbcType=INTEGER},
      </if>
      <if test="albumId != null" >
        album_id = #{albumId,jdbcType=INTEGER},
      </if>
      <if test="jurisdiction != null" >
        jurisdiction = #{jurisdiction,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.yznu.pca.model.UserPromission" >
    update user_promission
    set create_time = #{createTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      friend_id = #{friendId,jdbcType=INTEGER},
      album_id = #{albumId,jdbcType=INTEGER},
      jurisdiction = #{jurisdiction,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!--检查好友权限能否看用户相册-->
  <select id="checkFriendPower" resultMap="BaseResultMap" parameterType="cn.yznu.pca.model.UserPromission" >
    select * from user_promission where user_id = #{user_id,jdbcType=INTEGER} and friend_id=#{friend_id,jdbcType=INTEGER} and album_id = #{album_id,jdbcType=INTEGER}
  </select>

  <!--检查好友权限是否存在-->
  <select id="checkFriendPowerIsExist" resultMap="BaseResultMap">
    select * from user_promission  where user_id=#{user_id,jdbcType=INTEGER} and friend_id=#{friend_id,jdbcType=INTEGER} and album_id=#{album_id,jdbcType=INTEGER}
  </select>

  <update id="updateUserPromission" parameterType="cn.yznu.pca.model.UserPromission" >
    update user_promission
    set jurisdiction = #{jurisdiction,jdbcType=INTEGER}
    where user_id = #{user_id,jdbcType=INTEGER} and friend_id = #{friend_id,jdbcType=INTEGER} and album_id = #{album_id,jdbcType=INTEGER}
  </update>


  <delete id="deleteAllByAlbumId">
    delete  from user_promission where album_id= #{album_id,jdbcType=INTEGER}
  </delete>

  <select id="selectByAlbumId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from user_promission
    where album_id = #{albumId,jdbcType=INTEGER}
  </select>


  <delete id="whenDeleteFriend">
    delete  from user_promission where user_id= #{user_id,jdbcType=INTEGER} and friend_id= #{friend_id,jdbcType=INTEGER}
  </delete>
</mapper>